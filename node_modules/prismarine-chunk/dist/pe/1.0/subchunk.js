'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var readUInt4LE = require('uint4').readUInt4LE;
var writeUInt4LE = require('uint4').writeUInt4LE;

var BLOCK_SIZE = 16 * 16 * 16;
var METADATA_SIZE = 16 * 16 * 16 / 2;
var SKYLIGHT_SIZE = 16 * 16 * 16 / 2;
var BLOCKLIGHT_SIZE = 16 * 16 * 16 / 2;
var BUFFER_SIZE = 1 + (BLOCK_SIZE + METADATA_SIZE + BLOCKLIGHT_SIZE + SKYLIGHT_SIZE);

function getIndex(pos) {
  return 1 + (pos.x * 256 + pos.z * 16 + pos.y); // 1 + is for the version code :P
}

var SubChunk = function () {
  function SubChunk() {
    _classCallCheck(this, SubChunk);

    this.data = new Buffer(BUFFER_SIZE);
    this.data.fill(0);
  }

  _createClass(SubChunk, [{
    key: 'getBlockType',
    value: function getBlockType(pos) {
      return this.data.readUInt8(getIndex(pos));
    }
  }, {
    key: 'setBlockType',
    value: function setBlockType(pos, type) {
      this.data.writeUInt8(type, getIndex(pos));
    }
  }, {
    key: 'getBlockLight',
    value: function getBlockLight(pos) {
      return readUInt4LE(this.data, BLOCK_SIZE + METADATA_SIZE + SKYLIGHT_SIZE + getIndex(pos) / 2);
    }
  }, {
    key: 'setBlockLight',
    value: function setBlockLight(pos, light) {
      writeUInt4LE(this.data, light, BLOCK_SIZE + METADATA_SIZE + SKYLIGHT_SIZE + getIndex(pos) / 2);
    }
  }, {
    key: 'getSkyLight',
    value: function getSkyLight(pos) {
      return readUInt4LE(this.data, BLOCK_SIZE + METADATA_SIZE + getIndex(pos) / 2);
    }
  }, {
    key: 'setSkyLight',
    value: function setSkyLight(pos, light) {
      writeUInt4LE(this.data, light, BLOCK_SIZE + METADATA_SIZE + getIndex(pos) / 2);
    }
  }, {
    key: 'getBlockData',
    value: function getBlockData(pos) {
      return readUInt4LE(this.data, BLOCK_SIZE + getIndex(pos) / 2);
    }
  }, {
    key: 'setBlockData',
    value: function setBlockData(pos, data) {
      writeUInt4LE(this.data, data, BLOCK_SIZE + getIndex(pos) / 2);
    }
  }, {
    key: 'load',
    value: function load(data) {
      if (!Buffer.isBuffer(data)) throw new Error('Data must be a buffer');
      if (data.length != BUFFER_SIZE) throw new Error('Data buffer not correct size (was ' + data.length + ', expected ' + BUFFER_SIZE + ')');
      this.data = data;
    }
  }, {
    key: 'dump',
    value: function dump() {
      return this.data;
    }
  }]);

  return SubChunk;
}();

module.exports = SubChunk;
//# sourceMappingURL=../../maps/pe/1.0/subchunk.js.map
