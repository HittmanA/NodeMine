{"version":3,"sources":["/src/pe/0.14/chunk.js"],"names":["w","l","h","BLOCK_DATA_SIZE","REGULAR_DATA_SIZE","SKYLIGHT_DATA_SIZE","BLOCKLIGHT_DATA_SIZE","ADDITIONAL_DATA_SIZE_DIRTY","ADDITIONAL_DATA_SIZE_COLOR","BUFFER_SIZE","readUInt4LE","require","writeUInt4LE","module","exports","loader","mcVersion","Block","Chunk","exists","val","undefined","getArrayPosition","pos","x","z","y","getBlockCursor","getBlockDataCursor","getBlockLightCursor","getSkyLightCursor","getHeightMapCursor","getBiomeCursor","data","Buffer","fill","iniFunc","p","Vec3","block","setBlock","getBlockType","getBiome","getBlockData","light","getBlockLight","skyLight","getSkyLight","type","setBlockType","metadata","setBlockData","biome","setBiome","id","setSkyLight","setBlockLight","readUInt8","writeUInt8","color","readInt32BE","r","g","b","writeInt32BE","value","isBuffer","Error","length"],"mappings":"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","file":"../../../pe/0.14/chunk.js","sourcesContent":["'use strict';\n\nconst w=16;\nconst l=16;\nconst h=128;\nconst BLOCK_DATA_SIZE = w * l * h;\nconst REGULAR_DATA_SIZE = BLOCK_DATA_SIZE/2;\nconst SKYLIGHT_DATA_SIZE = BLOCK_DATA_SIZE/2;\nconst BLOCKLIGHT_DATA_SIZE = BLOCK_DATA_SIZE/2;\nconst ADDITIONAL_DATA_SIZE_DIRTY = w*l;\nconst ADDITIONAL_DATA_SIZE_COLOR = w*l*4;\nconst BUFFER_SIZE = BLOCK_DATA_SIZE + REGULAR_DATA_SIZE + SKYLIGHT_DATA_SIZE + BLOCKLIGHT_DATA_SIZE + ADDITIONAL_DATA_SIZE_COLOR + ADDITIONAL_DATA_SIZE_DIRTY;\n\nconst readUInt4LE = require('uint4').readUInt4LE;\nconst writeUInt4LE = require('uint4').writeUInt4LE;\n\nmodule.exports = loader;\n\nfunction loader(mcVersion) {\n  Block = require('prismarine-block')(mcVersion);\n  Chunk.w=w;\n  Chunk.l=l;\n  Chunk.h=h;\n  Chunk.BUFFER_SIZE=BUFFER_SIZE;\n  return Chunk;\n}\n\nvar Block;\n\nfunction exists(val) {\n  return val !== undefined;\n}\n\n\nvar getArrayPosition = function (pos) {\n  return pos.x+w*(pos.z+l*pos.y);\n};\n\nvar getBlockCursor = function (pos) {\n  return getArrayPosition(pos);\n};\n\nvar getBlockDataCursor = function(pos) {\n  return BLOCK_DATA_SIZE+getArrayPosition(pos) * 0.5;\n};\n\nvar getBlockLightCursor = function(pos) {\n  return BLOCK_DATA_SIZE+REGULAR_DATA_SIZE+getArrayPosition(pos) * 0.5;\n};\n\nvar getSkyLightCursor = function(pos) {\n  return BLOCK_DATA_SIZE+REGULAR_DATA_SIZE+SKYLIGHT_DATA_SIZE+getArrayPosition(pos) * 0.5;\n};\n\nvar getHeightMapCursor = function (pos) {\n  return BLOCK_DATA_SIZE+REGULAR_DATA_SIZE+SKYLIGHT_DATA_SIZE+BLOCKLIGHT_DATA_SIZE+(pos.z * w) + pos.x;\n};\n\nvar getBiomeCursor = function (pos) {\n  return BLOCK_DATA_SIZE+REGULAR_DATA_SIZE+SKYLIGHT_DATA_SIZE+BLOCKLIGHT_DATA_SIZE+ADDITIONAL_DATA_SIZE_DIRTY+((pos.z * w) + pos.x)*4;\n};\n\n\nclass Chunk {\n  constructor() {\n    this.data = new Buffer(BUFFER_SIZE);\n\n    this.data.fill(0);\n  }\n\n  initialize(iniFunc) {\n    const p=new Vec3(0,0,0);\n    for(p.y=0; p.y<h; p.y++) {\n      for(p.z=0; p.z<w; p.z++) {\n        for(p.x=0; p.x<l; p.x++) {\n          const block=iniFunc(p.x, p.y, p.z);\n          this.setBlock(pos,block);\n        }\n      }\n    }\n  }\n\n  getBlock(pos) {\n    var block = new Block(this.getBlockType(pos), this.getBiome(pos), this.getBlockData(pos));\n    block.light = this.getBlockLight(pos);\n    block.skyLight = this.getSkyLight(pos);\n    return block;\n  }\n\n  setBlock(pos, block) {\n    if (exists(block.type))\n      this.setBlockType(pos, block.type);\n    if (exists(block.metadata))\n      this.setBlockData(pos, block.metadata);\n    if (exists(block.biome))\n      this.setBiome(pos, block.biome.id);\n    if (exists(block.skyLight))\n      this.setSkyLight(pos, block.skyLight);\n    if (exists(block.light))\n      this.setBlockLight(pos, block.light);\n  }\n\n  getBlockType(pos) {\n    return this.data.readUInt8(getBlockCursor(pos));\n  }\n\n  setBlockType(pos, id) {\n    this.data.writeUInt8(id,getBlockCursor(pos));\n  }\n\n  getBlockData(pos) {\n    return readUInt4LE(this.data, getBlockDataCursor(pos));\n  }\n\n  setBlockData(pos, data) {\n    writeUInt4LE(this.data, data, getBlockDataCursor(pos));\n  }\n\n  getBlockLight(pos) {\n    return readUInt4LE(this.data, getBlockLightCursor(pos));\n  }\n\n  setBlockLight(pos, light) {\n    writeUInt4LE(this.data, light, getBlockLightCursor(pos));\n  }\n\n  getSkyLight(pos) {\n    return readUInt4LE(this.data, getSkyLightCursor(pos));\n  }\n\n  setSkyLight(pos, light) {\n    writeUInt4LE(this.data, light, getSkyLightCursor(pos));\n  }\n\n  getBiomeColor(pos) {\n    var color = this.data.readInt32BE(getBiomeCursor(pos)) & 0xFFFFFF;\n\n    return {\n      r: (color >> 16),\n      g: ((color >> 8) & 0xFF),\n      b: (color & 0xFF)\n    }\n  }\n\n  setBiomeColor(pos, r, g, b) {\n    this.data.writeInt32BE((this.data.readInt32BE(getBiomeCursor(pos)) & 0xFF000000)\n      | ((r & 0xFF) << 16) | ((g & 0xFF) << 8) | (b & 0XFF), getBiomeCursor(pos));\n  }\n\n  getBiome(pos) {\n    return (this.data.readInt32BE(getBiomeCursor(pos)) & 0xFF000000) >> 24;\n  }\n\n  setBiome(pos, id) {\n    this.data.writeInt32BE((this.data.readInt32BE(getBiomeCursor(pos)) & 0xFFFFFF) | (id << 24), getBiomeCursor(pos));\n  }\n\n  getHeight(pos) {\n    return this.data.readUInt8(getHeightMapCursor(pos,value));\n  }\n\n  setHeight(pos, value) {\n    this.data.writeUInt8(value,getHeightMapCursor(pos));\n  }\n\n  load(data) {\n    if (!Buffer.isBuffer(data))\n      throw(new Error('Data must be a buffer'));\n    if (data.length != BUFFER_SIZE)\n      throw(new Error(`Data buffer not correct size \\(was ${data.length}, expected ${BUFFER_SIZE}\\)`));\n    this.data = data;\n  }\n\n  dump() {\n    return this.data;\n  }\n}\n"]}