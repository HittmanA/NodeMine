{"version":3,"sources":["/src/pe/1.0/subchunk.js"],"names":["readUInt4LE","require","writeUInt4LE","BLOCK_SIZE","METADATA_SIZE","SKYLIGHT_SIZE","BLOCKLIGHT_SIZE","BUFFER_SIZE","getIndex","pos","x","z","y","SubChunk","data","Buffer","fill","readUInt8","type","writeUInt8","light","isBuffer","Error","length","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,cAAcC,QAAQ,OAAR,EAAiBD,WAArC;AACA,IAAME,eAAeD,QAAQ,OAAR,EAAiBC,YAAtC;;AAEA,IAAMC,aAAa,KAAK,EAAL,GAAU,EAA7B;AACA,IAAMC,gBAAiB,KAAK,EAAL,GAAU,EAAX,GAAiB,CAAvC;AACA,IAAMC,gBAAiB,KAAK,EAAL,GAAU,EAAX,GAAiB,CAAvC;AACA,IAAMC,kBAAmB,KAAK,EAAL,GAAU,EAAX,GAAiB,CAAzC;AACA,IAAMC,cAAc,KAAKJ,aAAaC,aAAb,GAA6BE,eAA7B,GAA+CD,aAApD,CAApB;;AAEA,SAASG,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAO,KAAMA,IAAIC,CAAJ,GAAQ,GAAT,GAAiBD,IAAIE,CAAJ,GAAQ,EAAzB,GAA+BF,IAAIG,CAAxC,CAAP,CADqB,CAC8B;AACpD;;IAEKC,Q;AACJ,sBAAc;AAAA;;AACZ,SAAKC,IAAL,GAAY,IAAIC,MAAJ,CAAWR,WAAX,CAAZ;AACA,SAAKO,IAAL,CAAUE,IAAV,CAAe,CAAf;AACD;;;;iCAEYP,G,EAAK;AAChB,aAAO,KAAKK,IAAL,CAAUG,SAAV,CAAoBT,SAASC,GAAT,CAApB,CAAP;AACD;;;iCAEYA,G,EAAKS,I,EAAM;AACtB,WAAKJ,IAAL,CAAUK,UAAV,CAAqBD,IAArB,EAA2BV,SAASC,GAAT,CAA3B;AACD;;;kCAEaA,G,EAAK;AACjB,aAAOT,YAAY,KAAKc,IAAjB,EAAuBX,aAAaC,aAAb,GAA6BC,aAA7B,GAA8CG,SAASC,GAAT,IAAc,CAAnF,CAAP;AACD;;;kCAEaA,G,EAAKW,K,EAAO;AACxBlB,mBAAa,KAAKY,IAAlB,EAAwBM,KAAxB,EAA+BjB,aAAaC,aAAb,GAA6BC,aAA7B,GAA8CG,SAASC,GAAT,IAAc,CAA3F;AACD;;;gCAEWA,G,EAAK;AACf,aAAOT,YAAY,KAAKc,IAAjB,EAAuBX,aAAaC,aAAb,GAA8BI,SAASC,GAAT,IAAc,CAAnE,CAAP;AACD;;;gCAEWA,G,EAAKW,K,EAAO;AACtBlB,mBAAa,KAAKY,IAAlB,EAAwBM,KAAxB,EAA+BjB,aAAaC,aAAb,GAA8BI,SAASC,GAAT,IAAc,CAA3E;AACD;;;iCAEYA,G,EAAK;AAChB,aAAOT,YAAY,KAAKc,IAAjB,EAAuBX,aAAcK,SAASC,GAAT,IAAc,CAAnD,CAAP;AACD;;;iCAEYA,G,EAAKK,I,EAAM;AACtBZ,mBAAa,KAAKY,IAAlB,EAAwBA,IAAxB,EAA8BX,aAAcK,SAASC,GAAT,IAAc,CAA1D;AACD;;;yBAEIK,I,EAAM;AACT,UAAI,CAACC,OAAOM,QAAP,CAAgBP,IAAhB,CAAL,EACE,MAAM,IAAIQ,KAAJ,CAAU,uBAAV,CAAN;AACF,UAAIR,KAAKS,MAAL,IAAehB,WAAnB,EACE,MAAM,IAAIe,KAAJ,wCAAgDR,KAAKS,MAArD,mBAAyEhB,WAAzE,OAAN;AACF,WAAKO,IAAL,GAAYA,IAAZ;AACD;;;2BAEM;AACL,aAAO,KAAKA,IAAZ;AACD;;;;;;AAGHU,OAAOC,OAAP,GAAiBZ,QAAjB","file":"../../../pe/1.0/subchunk.js","sourcesContent":["'use strict';\n\nconst readUInt4LE = require('uint4').readUInt4LE;\nconst writeUInt4LE = require('uint4').writeUInt4LE;\n\nconst BLOCK_SIZE = 16 * 16 * 16;\nconst METADATA_SIZE = (16 * 16 * 16) / 2;\nconst SKYLIGHT_SIZE = (16 * 16 * 16) / 2;\nconst BLOCKLIGHT_SIZE = (16 * 16 * 16) / 2;\nconst BUFFER_SIZE = 1 + (BLOCK_SIZE + METADATA_SIZE + BLOCKLIGHT_SIZE + SKYLIGHT_SIZE);\n\nfunction getIndex(pos) {\n  return 1 + ((pos.x * 256) + (pos.z * 16) + pos.y); // 1 + is for the version code :P\n}\n\nclass SubChunk {\n  constructor() {\n    this.data = new Buffer(BUFFER_SIZE);\n    this.data.fill(0);\n  }\n\n  getBlockType(pos) {\n    return this.data.readUInt8(getIndex(pos));\n  }\n\n  setBlockType(pos, type) {\n    this.data.writeUInt8(type, getIndex(pos));\n  }\n\n  getBlockLight(pos) {\n    return readUInt4LE(this.data, BLOCK_SIZE + METADATA_SIZE + SKYLIGHT_SIZE + (getIndex(pos)/2));\n  }\n\n  setBlockLight(pos, light) {\n    writeUInt4LE(this.data, light, BLOCK_SIZE + METADATA_SIZE + SKYLIGHT_SIZE + (getIndex(pos)/2));\n  }\n\n  getSkyLight(pos) {\n    return readUInt4LE(this.data, BLOCK_SIZE + METADATA_SIZE + (getIndex(pos)/2));\n  }\n\n  setSkyLight(pos, light) {\n    writeUInt4LE(this.data, light, BLOCK_SIZE + METADATA_SIZE + (getIndex(pos)/2));\n  }\n\n  getBlockData(pos) {\n    return readUInt4LE(this.data, BLOCK_SIZE + (getIndex(pos)/2));\n  }\n\n  setBlockData(pos, data) {\n    writeUInt4LE(this.data, data, BLOCK_SIZE + (getIndex(pos)/2));\n  }\n\n  load(data) {\n    if (!Buffer.isBuffer(data))\n      throw(new Error('Data must be a buffer'));\n    if (data.length != BUFFER_SIZE)\n      throw(new Error(`Data buffer not correct size \\(was ${data.length}, expected ${BUFFER_SIZE}\\)`));\n    this.data = data;\n  }\n\n  dump() {\n    return this.data;\n  }\n}\n\nmodule.exports = SubChunk;"]}